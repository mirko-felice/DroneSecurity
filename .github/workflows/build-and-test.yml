name: Build

on:
  push:
    branches:
      - 'master'
      - 'develop'
      - 'feature/**'
    tags-ignore:
      - '**'
    paths-ignore:
      - 'docs/**'
      - 'README.md'
      - 'LICENSE'
      - '**.cml'
      - 'CHANGELOG.md'
      - 'package-lock.json'
      - '.github/renovate.json'
  pull_request:

jobs:
  Build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.0.4
      - name: Setup JDK
        uses: actions/setup-java@v3.3.0
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.1.5
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      - name: Build
        env:
          DRONE_CERT: ${{ secrets.DRONE_CERT }}
          ENDPOINT: ${{ secrets.ENDPOINT }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          ROOT_CA: ${{ secrets.ROOT_CA }}
        run: ./gradlew build
      - name: Sonarqube Analyses
        if: matrix.os == 'ubuntu-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonarqube
  Pre-Release:
    if: github.ref_name == 'master'
    needs: Build
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, ubuntu-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0
      - name: Setup JDK
        uses: actions/setup-java@v3.3.0
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Create Application Jar
        uses: gradle/gradle-build-action@v2.1.5
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          arguments: ${{ runner.os }}FatJar
      - name: Upload Jar Artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          name: ${{ runner.os }}Jar
          path: user-application/build/libs/user-application-${{ runner.os }}-fat.jar
          retention-days: 1
      - name: Create Drone Jar
        if: matrix.os == 'ubuntu-latest'
        run: ./gradlew droneFatJar
      - name: Upload Drone Jar Artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3.1.0
        with:
          name: DroneJar
          path: drone-system/build/libs/drone-system-fat.jar
  Release:
    if: github.ref_name == 'master'
    needs: Pre-Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3.0.2
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0
      - name: Import GPG
        uses: crazy-max/ghaction-import-gpg@v5.0.0
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
      - name: Download Jar Artifacts
        uses: actions/download-artifact@v3.0.0
        with:
          path: artifacts
      - name: Publish Release To Github
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GIT_COMMITTER_NAME: Mirko Felice
          GIT_COMMITTER_EMAIL: mirko.felice@studio.unibo.it
          GIT_AUTHOR_NAME: Mirko Felice
          GIT_AUTHOR_EMAIL: mirko.felice@studio.unibo.it
        run: |
          npm install
          npx semantic-release
      - name: Publish Release To Maven
        uses: gradle/gradle-build-action@v2.1.5
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.GPG_PRIVATE_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.GPG_PASSPHRASE }}
          ORG_GRADLE_PROJECT_mavenUsername: ${{ secrets.MAVEN_USERNAME }}
          ORG_GRADLE_PROJECT_mavenPassword: ${{ secrets.MAVEN_PASSWORD }}
        with:
          arguments: publish --no-parallel
