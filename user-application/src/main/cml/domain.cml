ContextMap DroneManagementMap {
	type = SYSTEM_LANDSCAPE
	state = TO_BE
	contains DroneContext, IssueReportingContext, NegligenceReportingContext, ShippingContext, UserContext

	NegligenceReportingContext [U] -> [D, CF] DroneContext

	DroneContext [U] -> [D, CF] ShippingContext

    UserContext [U, OHS, PL] -> [D] ShippingContext

	UserContext [U, OHS, PL] -> [D] NegligenceReportingContext

	UserContext [U, OHS, PL] -> [D] IssueReportingContext
}

BoundedContext DroneContext implements Drone {
	type = FEATURE
	Aggregate Drone {
		ValueObject DrivingMode
		enum AlertLevel {
			STABLE, WARNING, CRITICAL;
		}

		enum AlertType {
			DISTANCE, ANGLE, CAMERA;
		}

		Entity Drone {
			String id
			- SensorSet sensorSet
			- DrivingMode drivingMode
			- OrderData orderData
			def void activate(@OrderData orderData);
            def void deactivate();
            def void isOperating();
            def void performReading();
            def void publishSensorData();
            def void proceed();
            def void halt();
			def void changeMode(@DrivingMode drivingMode);
            def String getId();
		}

		Service MovingStatePublisher {
			void droneHalted(@OrderData orderData);
			void droneProceeding(@OrderData orderData);
		}
	}

	Aggregate Sensor {
		Entity Sensor {
			def void activate();
			def void deactivate();
			def void isOn();
			def void performReading();
			def void publishData(@OrderData orderData);
		}

		Entity SensorSet {
			- @Sensor proximity;
			- @Sensor accelerometer;
			- @Sensor camera;
			def void activate(@OrderData orderData);
			def void deactivate();
			def @AlertLevel performReading();
			def void publishData();
		}

		Service AlertSituationAnalyzer {
			@AlertLevel analyzeAlerts (@OrderData orderData,
									   @Alert previousProximityAlert,
									   @Alert previousAccelerometerAlert,
									   @Alert currentProximityAlert,
									   @Alert currentAccelerometerAlert);
		}

		Service AlertLevelPublisher {
			void publishCurrentAlertLevel(@OrderData orderData, @Alert currentAlert);
			void publishStableAlertLevel(@OrderData orderData);
		}
	}

	Aggregate Order {
		ValueObject Path
		ValueObject OrderData
	}

	Aggregate Alert {
		ValueObject Alert
	}

	Aggregate Proximity {
		ValueObject RawProximityData
		ValueObject ProcessedProximityData
		Entity ProximitySensor extends @Sensor
		Service ProximityDataPublisher {
			void publishProximityData(@OrderData orderData, @ProcessedProximityData proximityData);
		}

		Service ProximityDataAnalyzer {
			@Alert analyzeProximityData(@ProcessedProximityData proximityData);
		}

		Service ProximityDataProcessor {
			@ProcessedProximityData processProximityData(@RawProximityData proximityData);
		}
	}

	Aggregate Accelerometer {
		ValueObject RawAccelerometerData
		ValueObject ProcessedAccelerometerData
		Entity AccelerometerSensor extends @Sensor
		Service AccelerometerDataPublisher {
			void publishAccelerometerData(@OrderData orderData, @ProcessedAccelerometerData accelerometerData);
		}

		Service AccelerometerDataAnalyzer {
			@Alert analyzeAccelerometerData(@ProcessedAccelerometerData accelerometerData);
		}

		Service AccelerometerDataProcessor {
			@ProcessedAccelerometerData processAccelerometerData(@RawAccelerometerData accelerometerData);
		}
	}

	Aggregate Camera {
		ValueObject RawCameraData
		ValueObject ProcessedCameraData
		Entity Camera extends @Sensor
		Service CameraConnection {
			@RawCameraData readCameraData();
			void disconnect();
		}

		Service CameraDataPublisher {
			void publishCameraData(@OrderData orderData, @ProcessedCameraData cameraData);
		}

		Service CameraDataAnalyzer {
			@Alert analyzeCameraData(@ProcessedCameraData cameraData);
		}

		Service CameraDataProcessor {
			@ProcessedCameraData processCameraData(@RawCameraData cameraData);
		}
	}

	Aggregate UserMonitoring {
		ValueObject SensorData
		ValueObject ProximityData extends SensorData
		ValueObject AccelerometerData extends SensorData
		ValueObject CameraData extends SensorData
		DomainEvent ProximityRead {
			- ProximityData proximityData
		}

		DomainEvent AccelerometerRead {
			- AccelerometerData accelerometerData
		}

		DomainEvent CameraRead {
			- CameraData cameraData
		}

		DomainEvent StableSituation

		DomainEvent DangerousSituation {
			- AlertType alertType
		}

		DomainEvent CriticalSituation {
			- AlertType alertType
		}

		DomainEvent StatusChanged {
			String status
		}

		DomainEvent MovingStateChanged {
			String movingState
		}

		Service DataManager {
			List<@ProximityData> retrieveProximityDataHistory(long orderId);
			List<@AccelerometerData> retrieveAccelerometerDataHistory(long orderId);
			List<@CameraData> retrieveCameraDataHistory(long orderId);
		}

		Service UserMonitoringService {
			void startOrderMonitoring(long orderId);
			void stopOrderMonitoring(long orderId);
		}
	}
}

BoundedContext IssueReportingContext implements Reporting {
	type = FEATURE
	responsibilities "Drone Issues"
	Aggregate CourierReport {
		
		Entity IssueReport {
			String id
			- IssueMaintainer referenceMaintainer
		}
		
		DomainEvent NewIssue {
			- IssueReport report
		}

		Service CourierReportService {
			
			void reportsIssue(@IssueReport report);
		}
	}
	
	Aggregate MaintainerIssueReport {
		
		Entity FixForm {
			String id
		}
		
		Entity IssueMaintainer 
		
		Service MaintainerIssueReportService {
			
			void onNewIssue();
			void fillSolutionForm(@FixForm form);
		}
	}
}

BoundedContext NegligenceReportingContext implements Reporting {
	type = FEATURE
	responsibilities "Couriers' negligence"
	
	Aggregate NegligenceReporting {

        ValueObject NegligenceIdentifier
        ValueObject Negligent
        ValueObject Assignee
		ValueObject NegligenceActionForm
		ValueObject DroneData

		abstract Entity NegligenceReport {
            aggregateRoot

            def @NegligenceIdentifier getId();
            def @Negligent getNegligent();
            def @Assignee assignedTo();
            def @DroneData getData();

            Repository NegligenceRepository {

                @NegligenceIdentifier nextNegligenceIdentifier();
                void createReport(@OpenNegligenceReport report);
                void takenAction(@ClosedNegligenceReport report);
                List<@OpenNegligenceReport> retrieveOpenReportsForNegligent(@Negligent negligent);
                List<@ClosedNegligenceReport> retrieveClosedReportsForNegligent(@Negligent negligent);
                List<@OpenNegligenceReport> retrieveOpenReportsForAssignee(@Assignee assignee);
                List<@ClosedNegligenceReport> retrieveClosedReportsForAssignee(@Assignee assignee);
            }
        }

        Entity OpenNegligenceReport extends NegligenceReport {
            def void takeAction(@NegligenceActionForm actionForm);
        }

        Entity ClosedNegligenceReport extends NegligenceReport {
            def @NegligenceActionForm getActionForm();
        }

		DomainEvent NewNegligence {
            - NegligenceReport report
        }

        DomainEvent NegligenceReportClosed {
            - ClosedNegligenceReport report
        }

        Service DroneReporter {
			void reportsNegligence(@Negligent negligent, @Assignee assignee, @DroneData data);
		}

		Service AssigneeReportsManager {
		    void takeAction(@OpenNegligenceReport report, @NegligenceActionForm actionForm);
			List<@OpenNegligenceReport> retrieveOpenReportsForAssignee(@Assignee assignee);
			List<@ClosedNegligenceReport> retrieveClosedReportsForAssignee(@Assignee assignee);
		}

		Service NegligentReportsManager {
		    List<@OpenNegligenceReport> retrieveOpenReportsForNegligent(@Negligent negligent);
		    List<@ClosedNegligenceReport> retrieveClosedReportsForNegligent(@Negligent negligent);
		}
	}
}

BoundedContext ShippingContext implements Shipping {
	
	Aggregate Shipping {

		ValueObject OrderIdentifier
		ValueObject Product
		ValueObject OrderDate

		enum OrderState {
		    PLACED, DELIVERING, SUCCEEDED, FAILED, RESCHEDULED;
		}

		abstract Entity Order {
			aggregateRoot
			
			- OrderIdentifier id
			- Product product
			- OrderDate placingDate
			- OrderDate estimatedArrival
			- Client client
			
			Repository OrderRepository {
				List<@Order> listOrders();
				@Order retrieveOrderById(@OrderIdentifier orderId);
				@OrderIdentifier nextOrderIdentifier();
				void placed(@PlacedOrder order);
				void delivering(@DeliveringOrder order);
				void succeeded(@SucceededOrder order);
				void failed(@FailedOrder order);
				void rescheduled(@RescheduledOrder order);
			}
		}
		
		Entity PlacedOrder extends Order {
		    def void startDelivering(String droneId, String courierUsername);
		}
		
		Entity DeliveringOrder extends Order {
		    def void succeedDelivery();
		    def void failDelivery();
		}
		
		Entity SucceededOrder extends Order
		
		Entity FailedOrder extends Order {
		    def void rescheduleDelivery(@OrderDate newEstimatedArrival);
		}
	
		Entity RescheduledOrder extends Order {
		    def @OrderDate getNewEstimatedArrival();
		}

		Service OrderManager {
		    List<@Order> listOrders();
            @Order retrieveOrderById(@OrderIdentifier identifier);
            void placeOrder(@Client who, @Product what, @OrderDate when);
		}

		Service DeliveryService {
		    void performDelivery(@PlacedOrder order, String droneId, String courierUsername);
            void succeedDelivery(@DeliveringOrder order);
            void failDelivery(@DeliveringOrder order);
            void rescheduleDelivery(@FailedOrder order, @OrderDate newEstimatedArrival);
		}

		Service DroneController {
		    void callBack(@OrderIdentifier orderId);
            void changeDrivingMode(@OrderIdentifier orderId, @DrivingMode drivingMode);
            void proceed(@OrderIdentifier orderId);
            void halt(@OrderIdentifier orderId);
		}

		DomainEvent OrderDelivering
		DomainEvent OrderFailed
		DomainEvent OrderSucceeded
		DomainEvent OrderRescheduled
	}
	
	Aggregate Client {

	    Entity Client
		
		ValueObject GPSPosition 
		
		DomainEvent ArrivalNotification
		DomainEvent RescheduleNotification
		
		Service ClientService {
			@Order placeOrder(@Product product);
			@GPSPosition track(@Order order);
			void onArrivalNotification();
			void onRescheduleNotification();
		}
	}
}

BoundedContext UserContext {

    Aggregate User {

        ValueObject Username

        enum Role {
            COURIER, MAINTAINER;
        }

        abstract Entity User {
            aggregateRoot

            def Username getUsername();
            def Role getRole();
            def boolean isLogged();
            def void logIn();
            def void logOut();

            Repository UserRepository {

                boolean isAuthenticated(@Username username, String password);
                void loggedIn(@User user);
                void loggedOut(@User user);
                Optional<@User> retrieveUserByUsername(@Username username);
                Optional<@Courier> retrieveCourierByUsername(@Username username);
                Optional<@Maintainer> retrieveMaintainerByUsername(@Username username);
                Optional<@Role> checkLoggedUserRole();
                Optional<@Courier> retrieveLoggedCourierIfPresent();
                Optional<@Maintainer> retrieveLoggedMaintainerIfPresent();
            }
        }

        Entity Courier extends User {
            def @Username supervisor();
            def List<String> assignedDrones();
        }

        Entity Maintainer extends User

        Service AuthenticationService {
           boolean logIn(@Username username, String password);
           boolean logOut();
        }

        Service UserManager {
            Optional<@Courier> retrieveCourierByUsername(@Username username);
            Optional<@Maintainer> retrieveMaintainerByUsername(@Username username);
            Optional<@Role> checkLoggedUserRole();
            Optional<@Courier> retrieveLoggedCourierIfPresent();
            Optional<@Maintainer> retrieveLoggedMaintainerIfPresent();
        }
    }
}

Domain DroneSecurity {
	
	Subdomain Drone supports DataAnalysis, DataMonitoring, AccidentPrevention, WarningAlert {
		type = CORE_DOMAIN
		domainVisionStatement "Subdomain able to analyze sensor data and thus prevent accidents and/or warn about dangerous situations."
	}

	Subdomain Reporting supports NegligenceReporting, IssueReporting, FixManagement, NegligenceManagement {
		type = CORE_DOMAIN
		domainVisionStatement "Subdomain managing reports about drone issues and couriers' negligence."
	}

	Subdomain Shipping supports ArrivalNotification, Tracking, OrderPlacing, Shipping, DeliveryRescheduling {
		type = SUPPORTING_DOMAIN
		domainVisionStatement "Subdomain supporting everything related to the shipping process."
	}

	Subdomain User supports LogIn, LogOut {
	    type = SUPPORTING_DOMAIN
	    domainVisionStatement "Subdomain supporting user login and logout."
	}

}

UseCase DataAnalysis {
	actor "Drone"
	interactions
	"analyze" "sensor_data"
	benefit	"it can detect dangerous situations."
}

UseCase DataMonitoring {
	actor "Drone"
	interactions
	"sends" "sensor_data" for "Maintainer",
	"sends" "sensor_data" for "Courier"
	benefit "users can monitor the drone state."
}

UseCase NegligenceReporting {
	actor "Drone"
	interactions
	"reports" "negligence" for "Maintainer"
	benefit "Maintainer can takes action against the Courier negligence."
}

UseCase AccidentPrevention {
	actor "Drone"
	interactions
	"prevents" "accident"
	benefit "accident won't happen."
}

UseCase WarningAlert {
	actor "Drone"
	interactions
	"alerts" "Courier"
	benefit "the Courier can prevent accidents."
}

UseCase ArrivalNotification {
	actor "Drone"
	interactions
	"notify" "Client"
	benefit "Client will know that the product has arrived to destination."
}

UseCase Tracking {
	actor "Client"
	interactions
	"track" "Drone"
	benefit "Client can see Drone location."
}

UseCase OrderPlacing {
	actor "Client"
	interactions
	"place" "order"
	benefit "Client will receive the product."
}

UseCase IssueReporting {
	actor "Courier"
	interactions
	"reports" "issue" for "Maintainer"
	benefit "Maintainer can manage the issue."
}

UseCase Shipping {
	actor "Courier"
	interactions
	"perform" "delivery"
	benefit "Drone can deliver the product to Client."
}

UseCase DeliveryRescheduling {
	actor "Courier"
	interactions
	"reschedule" "delivery" for "Client"
	benefit "the product will be delivered another day."
}

UseCase FixManagement {
	actor "Maintainer"
	interactions
	"fill" "solution_form" for "Drone"
	benefit "the Drone can be fixed."
}

UseCase NegligenceManagement {
	actor "Maintainer"
	interactions
	"takes" "action" for "Courier"
	benefit "the Courier will be punished."
}

UseCase LogIn {
    actor "User"
    interactions
    "log" "in"
    benefit "he can use his functionalities."
}

UseCase LogOut {
    actor "User"
    interactions
    "log" "out"
    benefit "another user can log into the system."
}
